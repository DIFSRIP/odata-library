"use strict";

const _ = require("lodash");

/**
 * Format  superagent error to normal Error object
 *
 * @static
 *
 * @param {Request} superAgentError object generated by superagent which contains HTTP error informtions
 *
 * @return {Error} javascript Error object with HTTP error explanation
 *
 * @memberof Agent
 */
module.exports.formatResponseError = function (superAgentError) {
  let httpInfo;
  let requestUrl;
  let cookies;
  let headers;
  let message;
  let error = new Error(`${superAgentError.message}\n\n${httpInfo}`);

  if (superAgentError.response) {
    requestUrl = _.get(superAgentError, "response.request.url");
    headers = JSON.stringify(
      _.get(superAgentError, "response.request.header"),
      null,
      2
    );
    cookies = JSON.stringify(
      _.get(superAgentError, "response.request.cookies").split(";"),
      null,
      2
    );
    httpInfo = [
      `URL : ${requestUrl}`,
      `\nHeaders : ${headers}`,
      `\nCookies : ${cookies}`,
    ].join("\n");
    message = module.exports.parseNetweaverErrorMessage(
      _.get(superAgentError, "response.text") ||
        _.get(superAgentError, "response.error.message") ||
        ""
    );
    error = new Error(
      `${superAgentError.message}${
        message ? " - " + message : ""
      }\n\n${httpInfo}`
    );
    error.response = _.get(superAgentError, "response");
  }

  return error;
};

/**
 * Parse body of the error response from Netweaver server
 *
 * @static
 *
 * @param {String} responseText is response text from Netweaver server
 *
 * @return {String} parse message
 *
 * @memberof Agent
 */
module.exports.parseNetweaverErrorMessage = function (responseText) {
  let errorMessageText;
  let parsedError;

  try {
    parsedError = JSON.parse(responseText);
    errorMessageText = [];
    if (_.has(parsedError, "error.message.value")) {
      errorMessageText.push(_.get(parsedError, "error.message.value"));
    }
    errorMessageText.push(JSON.stringify(parsedError, null, 2));
    errorMessageText = errorMessageText.join("\n\n");
  } catch (err) {
    errorMessageText = responseText;
  }

  return errorMessageText;
};

/**
 * Send informations about response and  request to the logger
 *
 * @param {Object} logger instance of class which implements log functions
 * @param {Number} counter sequence number of current HTTP request/response
 * @param {String} requestUrl endpoint which send response
 * @param {Object} opts options passed to fetch
 * @param {Object} res response from the HTTP server
 *
 * @memberof Agent
 */
module.exports.logResponse = function (logger, counter, requestUrl, opts, res) {
  logger.debug(
    `Response #${counter}\t${
      opts.method || "GET"
    }\t${requestUrl}\t${JSON.stringify(
      _.pickBy(
        res,
        (value, key) =>
          _.isString(key) &&
          _.find([/status/, /headers/], (regex) => key.match(regex))
      )
    )}`
  );
};

/**
 * Send informations about request to the logger
 *
 * @param {Object} logger instance of class which implements log functions
 * @param {Number} counter sequence number of current HTTP request/response
 * @param {String} requestUrl endpoint which send response
 * @param {Object} opts options passed to fetch
 *
 * @memberof Agent
 */
module.exports.logRequest = function (logger, counter, requestUrl, opts) {
  logger.debug(
    `Request #${counter}\t${
      opts.method || "GET"
    }\t${requestUrl}\t${JSON.stringify(
      _.pickBy(opts, (value, key) => {
        return key !== "method";
      })
    )}`
  );
};
